{"version":3,"sources":["Redux/app.js","Redux/user.js","Routes/async-route.js","Routes/index.js","Redux/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["actionTypes","Immutable","MODAL_TASK_OPEN","MODAL_TASK_DETAIL_OPEN","MODAL_TASK_CLOSE_ALL","TASK_LIST_SAVE","actions","ModalTaskOpen","open","task","type","ModalTaskDetailOpen","ModalTaskCloseAll","TaskListSave","taskList","selector","selectModalTaskOpened","state","app","modalTaskOpened","selectModalTaskDetailOpened","modalTaskDetailOpened","selectTaskDetail","selectTaskList","INITIAL_STATE","reducer","action","merge","FAILURE","SIGN_IN","SIGN_IN_SUCCESS","REGISTER","REGISTER_SUCCESS","USER_LIST","USER_LIST_SUCCESS","Failure","error","selectData","user","data","selectUsers","users","selectError","id","username","asyncRoutes","importComponent","props","component","default","this","setState","Comp","Component","Home","AsyncRoute","About","Routes","childProps","exact","path","combineReducers","require","console","log","process","history","createBrowserHistory","basename","middleware","thunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","store","createStore","connectRouter","rootReducer","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c9ec40aa.chunk.js","sourcesContent":["import Immutable from 'seamless-immutable'\n\n// Create Immutable object\nconst actionTypes = Immutable({\n  MODAL_TASK_OPEN: 'app/MODAL_TASK_OPEN',\n  MODAL_TASK_DETAIL_OPEN: 'app/MODAL_TASK_DETAIL_OPEN',\n  MODAL_TASK_CLOSE_ALL: 'app/MODAL_TASK_CLOSE_ALL',\n  TASK_LIST_SAVE: 'app/TASK_LIST_SAVE'\n})\n\n// Actions\nexport const actions = {\n  ModalTaskOpen: (open, task) => {\n    return {\n      type: actionTypes.MODAL_TASK_OPEN,\n      open,\n      task\n    }\n  },\n  ModalTaskDetailOpen: (open, task) => {\n    return {\n      type: actionTypes.MODAL_TASK_DETAIL_OPEN,\n      open,\n      task\n    }\n  },\n  ModalTaskCloseAll: () => {\n    return {\n      type: actionTypes.MODAL_TASK_CLOSE_ALL\n    }\n  },\n  TaskListSave: taskList => {\n    return {\n      type: actionTypes.TASK_LIST_SAVE,\n      taskList\n    }\n  }\n}\n\n// Selectors\nexport const selector = {\n  selectModalTaskOpened: state => state.app.modalTaskOpened,\n  selectModalTaskDetailOpened: state => state.app.modalTaskDetailOpened,\n  selectTaskDetail: state => state.app.task,\n  selectTaskList: state => state.app.taskList\n}\n\n// Reducers\nexport const INITIAL_STATE = Immutable({\n  modalTaskOpened: false,\n  modalTaskDetailOpened: false,\n  task: null,\n  taskList: []\n})\n\nexport const reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case actionTypes.MODAL_TASK_OPEN:\n      return state.merge({modalTaskOpened: action.open, task: action.task })\n    case actionTypes.MODAL_TASK_DETAIL_OPEN:\n      return state.merge({ modalTaskDetailOpened: action.open, task: action.task })\n    case actionTypes.MODAL_TASK_CLOSE_ALL:\n      return state.merge({\n        modalTaskOpened: false,\n        modalTaskDetailOpened: false,\n        task: null\n      })\n    case actionTypes.TASK_LIST_SAVE:\n      return state.merge({ taskList: action.taskList })\n    default:\n      return state\n  }\n}","import Immutable from 'seamless-immutable'\n\n// Create Immutable object\nconst actionTypes = Immutable({\n  FAILURE: 'user/FAILURE',\n  SIGN_IN: 'user/SIGN_IN',\n  SIGN_IN_SUCCESS: 'user/SIGN_IN_SUCCESS',\n  REGISTER: 'user/REGISTER',\n  REGISTER_SUCCESS: 'user/REGISTER_SUCCESS',\n  USER_LIST: 'user/USER_LIST',\n  USER_LIST_SUCCESS: 'user/USER_LIST_SUCCESS'\n})\n\n// Actions\nexport const Failure = (error) => {\n  return {\n    type: actionTypes.FAILURE,\n    error,\n  }\n}\n\n// Selectors\nexport const selector = {\n  selectData: state => state.user.data,\n  selectUsers: state => state.user.users,\n  selectError: state => state.user.error\n}\n\n// Reducers\nexport const INITIAL_STATE = Immutable({\n  data: {\n    id: 1,\n    username: 'Lingga'\n  },\n  error: null,\n  users: [{\n    id: 1,\n    username: 'Lingga'\n  }, {\n    id: 2,\n    username: 'Andi'\n  }, {\n    id: 3,\n    username: 'John'\n  }, {\n    id: 4,\n    username: 'Audrey'\n  }]\n})\n\nexport const reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case actionTypes.FAILURE:\n      return state.merge({ error: action.error, data: null })\n    case actionTypes.SIGN_IN_SUCCESS:\n      return state.merge({ data: action.data })\n    case actionTypes.REGISTER_SUCCESS:\n      return state.merge({ data: action.data })\n    case actionTypes.USER_LIST_SUCCESS:\n      return state.merge({ users: action.users })\n    default:\n      return state\n  }\n}","import React, { Component } from 'react'\n\nexport default function asyncRoutes(importComponent) {\n  class AsyncRoute extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        component: null,\n      }\n    }\n    async componentDidMount() {\n      const { default: component } = await importComponent()\n      this.setState({ component })\n    }\n    render() {\n      const Comp = this.state.component\n      return Comp ? <Comp { ...this.props } /> : null\n    }\n  }\n\n  return AsyncRoute\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport AsyncRoute from './async-route'\n\nconst Home = AsyncRoute(() => import('../Containers/Home'))\nconst About = AsyncRoute(() => import('../Containers/About'))\n\nfunction Routes({ childProps = null }) {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} props={childProps} />\n      <Route exact path=\"/about\" component={About} props={childProps} />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import { combineReducers } from 'redux'\n\nexport default combineReducers({\n  app: require('./app').reducer,\n  user: require('./user').reducer\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\nimport thunk from 'redux-thunk'\nimport { createBrowserHistory } from 'history'\nimport rootReducer from './Redux/index'\nconsole.log(process.env.REACT_APP_BASENAME)\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_BASENAME || '/' })\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [\n  thunk,\n  routerMiddleware(history)\n]\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\nconst store = createStore(\n  connectRouter(history)(rootReducer),\n  initialState,\n  composedEnhancers\n)\n\nexport default store","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter, Router } from 'react-router-dom'\nimport Routes from './Routes'\nimport store, { history } from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Router history={history}>\n          <Routes />\n        </Router>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}