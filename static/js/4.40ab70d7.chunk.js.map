{"version":3,"sources":["Config/pouchy-store.js","Models/Tasks/validator.js","Config/task-status.js","Models/Tasks/index.js","Containers/Home/text.js","Theme/colors.js","Components/Header/text.js","Components/Header/index.js","Theme/index.js","Components/Frame/index.js","Utils/date-formatter.js","Components/TaskCard/index.js","Components/TaskModalAdd/text.js","Components/TagInput/index.js","Components/TaskModalAdd/index.js","Components/TaskListSingle/index.js","Utils/react-debounce.js","Components/TaskList/index.js","Containers/Home/index.js","Config/db-names.js"],"names":["couchDBUrl","process","couchDBAuth","username","password","Yup","shape","assignee","required","title","max","description","tags","min","TASK_STATUS_COMPLETED","LABEL_TASK_STATUS","name","this","_name","config","auth","PouchyStore","ModelValidator","validator","InitialValues","reporter","status","dueDate","Date","HOME_TEXT_BUTTON_ADD_ITEM","HOME_TEXT_BUTTON_UPLOAD_LIST","HOME_TEXT_ALERT_TASK_DELETED","HOME_TEXT_ALERT_TASK_CREATED","HOME_TEXT_ALERT_TASK_UPDATED","HOME_TEXT_ALERT_SYNC_COMPLETE","Index","props","p","width","bg","colors","sx","position","alignItems","justifyContent","fontSize","render","online","color","borderWidth","borderStyle","borderRadius","borderColor","textContent","breakpoints","fontSizes","space","fonts","body","heading","monospace","fontWeights","bold","lineHeights","shadows","small","large","input","select","textarea","text","error","subtitle","fontWeight","buttons","primary","boxShadow","variants","inline","display","listContainer","listItemContainer","tag","mr","onlineStatus","padding","modal","content","height","left","right","bottom","top","marginRight","transform","theme","Header","pt","ml","children","rawDate","date","day","getDate","monthIndex","getMonth","year","getFullYear","Modal","setAppElement","opened","onClose","onEdit","onMoveCard","onRemove","task","overdue","getTime","isCompleted","isOpen","onRequestClose","shouldCloseOnOverlayClick","style","mb","variant","onClick","_id","dateFormatter","completedAt","textAlign","createdAt","map","key","LABEL_ADD","LABEL_EDIT","renderInput","addTag","exProps","inputValue","value","trim","toLowerCase","inputLength","length","suggestions","filter","suggestion","slice","ref","shouldRenderSuggestions","getSuggestionValue","renderSuggestion","inputProps","onChange","e","newValue","method","preventDefault","onSuggestionSelected","onSuggestionsClearRequested","onSuggestionsFetchRequested","connect","state","taskDetail","AppSelector","selectTaskDetail","onSubmit","userList","initialValues","tagList","userListMapped","user","id","JSON","stringify","initialValuesEdit","contentLabel","label","values","validationSchema","handleSubmit","pb","htmlFor","handleChange","onBlur","handleBlur","touched","errors","rows","setFieldValue","minDate","format","type","dispatch","bindActionCreators","handleModalTaskOpen","open","AppActions","ModalTaskDetailOpen","tasks","useState","tasksMapped","setTasksMapped","debouncedListRender","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","handleModalOpen","pl","taskListMapped","setTaskListMapped","taskList","forEach","val","push","Object","keys","category","index","TaskListSingle","sort","a","b","dirtyAt","mt","combineTags","data","i","lastSync","localStorage","getItem","unsub","lastSyncDate","parse","loading","taskAddOpened","taskDetailOpened","handleUpdate","handleTaskListSave","Model","handleRemove","deleteItem","alert","handleModalClose","console","log","editItem","addItem","handleMoveCard","handleUpload","today","upload","setItem","setState","handleModalCloseAll","subscribe","isInitialized","setName","initialize","deinitialize","modalTaskOpened","modalTaskDetailOpened","Frame","TaskCard","TaskModalAdd","toString","disabled","backgroundColor","TaskList","React","PureComponent","UserSelector","selectData","selectUsers","selectModalTaskOpened","selectModalTaskDetailOpened","selectTaskList","changePage","route","TaskListSave","ModalTaskOpen","ModalTaskCloseAll"],"mappings":"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","file":"static/js/4.40ab70d7.chunk.js","sourcesContent":["export default {\n  couchDBUrl: process.env.REACT_APP_COUCH_DB_URL,\n  couchDBAuth: {\n    username: process.env.REACT_APP_COUCH_DB_USERNAME,\n    password: process.env.REACT_APP_COUCH_DB_PASSWORD\n  }\n}","import * as Yup from 'yup'\n\nexport default Yup.object().shape({\n  assignee: Yup.object()\n    .required('Please select an assignee' ),\n  title: Yup.string()\n    .max(40, 'Please enter no more than 40 characters')\n    .required('Please enter a title'),\n  description: Yup.string()\n    .max(1000, 'Please enter no more than 255 characters')\n    .required('Please enter a description'),\n  tags: Yup.array()\n    .required('Please select at least 1 tag')\n    .min(1, 'Please select at least 1 tag')\n})","export const TASK_STATUS_BACKLOG = 'backlog'\nexport const TASK_STATUS_IN_PROGRESS = 'in-progress'\nexport const TASK_STATUS_COMPLETED = 'completed'\nexport const LABEL_TASK_STATUS = {\n  [TASK_STATUS_BACKLOG]: 'Backlog',\n  [TASK_STATUS_IN_PROGRESS]: 'In Progress',\n  [TASK_STATUS_COMPLETED]: 'Completed'\n}","import PouchyStore from 'pouchy-store'\nimport config from '../../Config/pouchy-store'\nimport validator from './validator'\nimport { TASK_STATUS_BACKLOG } from '../../Config/task-status'\n\nclass Model extends PouchyStore {\n  get name() {\n    return this._name\n  }\n\n  setName(name) {\n    this._name = name\n  }\n\n  get urlRemote() {\n    return config.couchDBUrl\n  }\n\n  get optionsRemote() {\n    return {\n      auth: config.couchDBAuth\n    }\n  }\n}\n\nexport default new Model()\nexport const ModelValidator = validator\nexport const InitialValues = {\n  assignee: '',\n  reporter: '',\n  title: '',\n  status: TASK_STATUS_BACKLOG,\n  description: '',\n  dueDate: new Date(),\n  tags: []\n}\n\n","export default {\n  HOME_TEXT_BUTTON_ADD_ITEM: 'Add Item',\n  HOME_TEXT_BUTTON_UPLOAD_LIST: 'Sync List',\n  HOME_TEXT_ALERT_TASK_DELETED: 'Task Deleted',\n  HOME_TEXT_ALERT_TASK_CREATED: 'Task Created',\n  HOME_TEXT_ALERT_TASK_UPDATED: 'Task Updated',\n  HOME_TEXT_ALERT_SYNC_COMPLETE: 'Sync Completed'\n}","export default {\n  main: '#52BB9A',\n  second: '#5FA8D3',\n  third: '#627C85',\n  fourth: '#A2E8DD',\n  fifth: '#5FA8D3',\n  background: '#DDD',\n  dark: '#232323',\n  white: '#F8F8F8',\n  red: '#ff8080',\n  lines: '#8D8D8D'\n}","export default {\n  HOME_TEXT_OFFLINE: 'You are currently offline',\n  HOME_TEXT_ONLINE: 'You are currently online'\n}","import React from 'react'\nimport { Box, Heading, Flex, Text } from 'rebass'\nimport { Detector } from 'react-detect-offline'\nimport colors from '../../Theme/colors'\nimport textContent from './text'\n\nconst Index = props => (\n  <Box\n    p={20}\n    width={1}\n    bg={colors.main}\n    sx={{\n      position: 'fixed'\n    }}\n  >\n    <Flex\n      alignItems='center'\n      justifyContent='space-between'\n    >\n      <Box\n        width={7/10}\n      >\n        <Heading\n          fontSize={4}\n        >\n          Tasklist App\n        </Heading>\n      </Box>\n      <Box\n        width={3/10}\n      >\n        <Detector\n          render={({ online }) => (\n            <Text\n              p={10}\n              color={online ? colors.white : colors.red}\n              sx={{\n                borderWidth: '1px',\n                borderStyle: 'solid',\n                borderRadius: '5px',\n                borderColor: online ? colors.white : colors.red,\n              }}\n            >\n              {online ? textContent.HOME_TEXT_ONLINE : textContent.HOME_TEXT_OFFLINE}\n            </Text>\n          )}\n        />\n      </Box>\n    </Flex>\n  </Box>\n)\n\nexport default Index","import colors from './colors'\n\nexport default {\n  breakpoints: ['40em', '52em', '64em'],\n  fontSizes: [\n    10, 12, 14, 16, 18, 32, 48, 64\n  ],\n  space: [\n    0, 4, 8, 16, 32, 64, 128, 256\n  ],\n  fonts: {\n    body: 'system-ui, sans-serif',\n    heading: 'inherit',\n    monospace: 'Menlo, monospace',\n  },\n  fontWeights: {\n    body: 400,\n    heading: 700,\n    bold: 700,\n  },\n  lineHeights: {\n    body: 1.5,\n    heading: 1.25,\n  },\n  shadows: {\n    small: '0 0 4px rgba(0, 0, 0, .125)',\n    large: '0 0 24px rgba(0, 0, 0, .125)'\n  },\n  input: {\n    borderColor: colors.lines\n  },\n  select: {\n    borderColor: colors.lines\n  },\n  textarea: {\n    borderColor: colors.lines\n  },\n  text: {\n    color: colors.dark,\n    error: {\n      color: colors.red\n    },\n    subtitle: {\n      fontSize: 14,\n      fontWeight: 'bold'\n    }\n  },\n  buttons: {\n    primary: {\n      color: colors.white,\n      bg: colors.main,\n      boxShadow: 'small'\n    }\n  },\n  variants: {\n    inline: {\n      display: 'inline-block'\n    },\n    listContainer: {\n      borderRadius: 10,\n      bg: colors.white,\n      p: 8\n    },\n    listItemContainer: {\n      borderRadius: 5,\n      bg: colors.background,\n      p: 10,\n      boxShadow: 'small'\n    },\n    tag: {\n      display: 'inline-block',\n      p: 2,\n      mr: 1,\n      borderRadius: 20,\n      bg: colors.third,\n      color: colors.white,\n      fontSize: 11\n    },\n    onlineStatus: {\n      borderColor: colors.main,\n      borderRadius: 2,\n      padding: 10\n    }\n  },\n  modal: {\n    content: {\n      height: '85%',\n      width: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      top: '50%',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)'\n    }\n  }\n}","import React from 'react'\nimport { Box } from 'rebass'\nimport Header from '../Header'\nimport theme from '../../Theme'\nimport { ThemeProvider } from 'emotion-theming'\n\nconst Index = props => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Header />\n      <Box\n        pt={100}\n        width={1}\n      >\n        <Box\n          ml={20}\n          mr={20}\n        >\n          { props.children }\n        </Box>\n      </Box>\n    </ThemeProvider>\n  )\n}\n\nexport default Index","export default function (rawDate) {\n  const date = new Date(rawDate)\n  if (date) {\n    var monthNames = [\n      'January', 'February', 'March',\n      'April', 'May', 'June', 'July',\n      'August', 'September', 'October',\n      'November', 'December'\n    ]\n  \n    const day = date.getDate()\n    const monthIndex = date.getMonth()\n    const year = date.getFullYear()\n  \n    return `${day} ${monthNames[monthIndex]} ${year}`\n  }\n\n  return ''\n}","import React from 'react'\nimport { Box, Heading, Flex, Text, Button } from 'rebass'\nimport Modal from 'react-modal'\nimport theme from '../../Theme'\nimport colors from '../../Theme/colors'\nimport dateFormatter from '../../Utils/date-formatter'\nimport { TASK_STATUS_BACKLOG, TASK_STATUS_IN_PROGRESS, TASK_STATUS_COMPLETED, LABEL_TASK_STATUS } from '../../Config/task-status'\n\nModal.setAppElement('body') // for accessibility\n\nconst Index = props => {\n  const { opened, onClose, onEdit, onMoveCard, onRemove, task } = props\n  const overdue = task && new Date().getTime() > new Date(task.dueDate).getTime()\n  const isCompleted = task && task.status === TASK_STATUS_COMPLETED\n  const MoveButton = (props) => {\n    switch (props.task.status) {\n      case TASK_STATUS_BACKLOG:\n        return (\n          <Button\n            variant='primary'\n            bg={colors.fifth}\n            onClick={() => onMoveCard(TASK_STATUS_IN_PROGRESS, task)}\n            mr={10}\n          >\n            Move to {LABEL_TASK_STATUS[TASK_STATUS_IN_PROGRESS]}\n          </Button>\n        )\n      case TASK_STATUS_IN_PROGRESS:\n          return (\n            <>\n              <Button\n                variant='primary'\n                bg={colors.fifth}\n                onClick={() => onMoveCard(TASK_STATUS_BACKLOG, task)}\n                mr={10}\n              >\n                Move to {LABEL_TASK_STATUS[TASK_STATUS_BACKLOG]}\n              </Button>\n              <Button\n                variant='primary'\n                bg={colors.fifth}\n                onClick={() => onMoveCard(TASK_STATUS_COMPLETED, task)}\n                mr={10}\n              >\n                Move to {LABEL_TASK_STATUS[TASK_STATUS_COMPLETED]}\n              </Button>\n            </>\n          )\n      case TASK_STATUS_COMPLETED:\n          return (\n            <Button\n              variant='primary'\n              bg={colors.fifth}\n              onClick={() => onMoveCard(TASK_STATUS_IN_PROGRESS, task)}\n              mr={10}\n            >\n              Move to {LABEL_TASK_STATUS[TASK_STATUS_IN_PROGRESS]}\n            </Button>\n          )\n      default:\n        return <></>\n    }\n  }\n\n  return (\n    <Modal\n      isOpen={opened}\n      onRequestClose={onClose}\n      shouldCloseOnOverlayClick={true}\n      style={theme.modal}\n    >\n      {task && (\n        <Box>\n          <Flex mb={10} justifyContent='space-between' alignItems='top'>\n            <Heading fontSize={5}>{task.title}</Heading>\n            <Box>\n              <Button\n                variant='primary'\n                onClick={() => onEdit(true, task)}\n                mr={10}\n              >\n                Edit\n              </Button>\n              <Button\n                variant='primary'\n                onClick={() => onRemove(task._id)}\n                mr={10}\n              >\n                Remove\n              </Button>\n              <Button\n                variant='primary'\n                onClick={onClose}\n              >\n                Close\n              </Button>\n            </Box>\n          </Flex>\n          <hr />\n          <Flex mb={50} justifyContent='space-between'>\n            <Box>\n              <Text><b>{isCompleted ? 'Completed on :' : 'Due on :'}</b> {dateFormatter(isCompleted ? task.completedAt: task.dueDate)}</Text>\n              <Text>{task.assignee && (<><b>Assignee:</b> {task.assignee.username}</>)}</Text>\n              <Text pt={8}><b>{LABEL_TASK_STATUS[task.status]}</b></Text>\n              <Text pt={8} fontWeight='bold' fontSize={16} color={colors.red}>{overdue && !isCompleted && 'OVERDUE'}</Text>\n            </Box>\n            <Box>\n              <Text textAlign='right'><b>Reported on:</b> {dateFormatter(task.createdAt)}</Text>\n              <Text textAlign='right'>{task.reporter && (<><b>Reporter:</b> {task.reporter.username}</>)}</Text>\n            </Box>\n          </Flex>\n          <Box mb={50}>\n            <Text><b>Description</b></Text>\n            <hr />\n            <Box>\n              {task.description}\n            </Box>\n          </Box>\n          <Box mb={50}>\n            <Text><b>Tags</b></Text>\n            <hr />\n            <Box>\n              {task.tags && task.tags.map(tag => {\n                return (\n                  <Box fontSize={14} key={tag} variant='tag'>{tag}</Box>\n                )\n              })}\n            </Box>\n          </Box>\n          <Box>\n            <MoveButton task={task}/>\n          </Box>\n        </Box>\n      )}\n    </Modal>\n  )\n}\n\nexport default Index","export default {\n  LABEL_ADD: 'Add New Task',\n  LABEL_EDIT: 'Edit Task'\n}","import React from 'react'\nimport { Text } from 'rebass'\nimport TagsInput from 'react-tagsinput'\nimport Autosuggest from 'react-autosuggest'\nimport './_overwrite.css'\n\nconst Index = props => {\n  const autocompleteRenderInput = ({ addTag, ...exProps }) => {\n    const handleOnChange = (e, {newValue, method}) => {\n      if (method === 'enter') {\n        e.preventDefault()\n      } else {\n        exProps.onChange(e)\n      }\n    }\n\n    const inputValue = (exProps.value && exProps.value.trim().toLowerCase()) || ''\n    const inputLength = inputValue.length\n\n    let suggestions = (props.suggestions && props.suggestions.filter((suggestion) => {\n      return suggestion.toLowerCase().slice(0, inputLength) === inputValue\n    })) || []\n\n    return (\n      <Autosuggest\n        ref={exProps.ref}\n        suggestions={suggestions}\n        shouldRenderSuggestions={value => value && value.trim().length > 0}\n        getSuggestionValue={suggestion => suggestion}\n        renderSuggestion={suggestion => <Text>{suggestion}</Text>}\n        inputProps={{...exProps, onChange: handleOnChange}}\n        onSuggestionSelected={(e, {suggestion}) => {\n          addTag(suggestion)\n        }}\n        onSuggestionsClearRequested={() => {}}\n        onSuggestionsFetchRequested={() => {}}\n      />\n    )\n  }\n\n  return <TagsInput renderInput={autocompleteRenderInput} value={props.value || []} onChange={props.onChange} />\n}\n\nexport default Index","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Box, Button, Text, Heading } from 'rebass'\nimport { Label, Input, Textarea, Select } from '@rebass/forms'\nimport DatePicker from 'react-date-picker'\nimport { Formik } from 'formik'\nimport Modal from 'react-modal'\nimport theme from '../../Theme'\nimport { ModelValidator } from '../../Models/Tasks'\nimport text from './text'\nimport { selector as AppSelector } from '../../Redux/app'\n\nimport ReactTags from '../TagInput'\n\nModal.setAppElement('body') // for accessibility\n\nconst Index = props => {\n  const { taskDetail, opened, onSubmit, onClose, userList, initialValues, tagList } = props\n  const userListMapped = userList.map(user => {\n    return (<option key={user.id} value={ JSON.stringify(user) }>{user.username}</option>)\n  })\n  const initialValuesEdit = taskDetail && {\n    ...taskDetail,\n    assignee: JSON.stringify(taskDetail.assignee),\n    dueDate: new Date(taskDetail.dueDate)\n  }\n\n  return (\n    <Modal\n      isOpen={opened}\n      contentLabel={text.label}\n      onRequestClose={onClose}\n      shouldCloseOnOverlayClick={true}\n      style={theme.modal}\n    >\n      <Heading mb={10} fontSize={3}>{taskDetail ? text.LABEL_EDIT : text.LABEL_ADD}</Heading>\n      <Formik\n        initialValues={initialValuesEdit || initialValues}\n        onSubmit={values => onSubmit(values, taskDetail)}\n        validationSchema={ModelValidator}\n        render={props => {\n          return (\n            <form\n              onSubmit={props.handleSubmit}\n            >\n              <Box mb={20} width={1}>\n                <Label pb={10} htmlFor='assignee'>Assignee</Label>\n                <Select\n                  id='assignee'\n                  name='assignee'\n                  onChange={props.handleChange}\n                  onBlur={props.handleBlur}\n                  value={props.values.assignee}\n                >\n                  <option value={null} />\n                  { userListMapped }\n                </Select>\n                {props.touched.assignee && props.errors.assignee &&\n                  <Text pt={2} variant='error'>{props.errors.assignee}</Text>\n                }\n              </Box>\n              <Box mb={20} width={1}>\n                <Label pb={10} htmlFor='title'>Title</Label>\n                <Input\n                  id='title'\n                  name='title'\n                  style={{\n                    width: '100%'\n                  }}\n                  onChange={props.handleChange}\n                  onBlur={props.handleBlur}\n                  value={props.values.title}\n                />\n                {props.touched.title && props.errors.title &&\n                  <Text pt={2} variant='error'>{props.errors.title}</Text>\n                }\n              </Box>\n              <Box mb={20} width={1}>\n                <Label pb={10} htmlFor='description'>Description</Label>\n                <Textarea\n                  id='description'\n                  name='description'\n                  style={{\n                    width: '100%'\n                  }}\n                  rows={10}\n                  onChange={props.handleChange}\n                  onBlur={props.handleBlur}\n                  value={props.values.description}\n                />\n                {props.touched.description && props.errors.description &&\n                  <Text pt={2} variant='error'>{props.errors.description}</Text>\n                }\n              </Box>\n              <Box mb={20} width={1}>\n                <Label pb={10} htmlFor='dueDate'>Due Date</Label>\n                <DatePicker\n                  name='dueDate'\n                  onChange={e => props.setFieldValue('dueDate', e)}\n                  value={props.values.dueDate}\n                  minDate={new Date()}\n                  format='dd/MM/y'\n                />\n                {props.touched.dueDate && props.errors.dueDate &&\n                  <Text pt={2} variant='error'>{props.errors.dueDate}</Text>\n                }\n              </Box>\n              <Box mb={20} width={1}>\n                <Label pb={10} htmlFor='tags'>Tags</Label>\n                <ReactTags\n                  value={props.values.tags}\n                  suggestions={tagList}\n                  onChange={e => props.setFieldValue('tags', e)}\n                />\n                {props.touched.dueDate && props.errors.dueDate &&\n                  <Text pt={2} variant='error'>{props.errors.dueDate}</Text>\n                }\n              </Box>\n              \n              <Button\n                variant='primary'\n                type='submit'\n                mr={10}\n              >\n                Submit\n              </Button>\n              <Button\n                type='reset'\n                variant='primary'\n                onClick={onClose}\n              >\n                Close\n              </Button>\n            </form>\n          )}\n        }\n      />\n    </Modal>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  taskDetail: AppSelector.selectTaskDetail(state)\n})\n\nexport default connect(\n  mapStateToProps, \n  null\n)(Index)","import React, { useState, useEffect } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { Box, Card, Text, Heading, Flex } from 'rebass'\nimport dateFormatter from '../../Utils/date-formatter'\nimport colors from '../../Theme/colors'\nimport { actions as AppActions } from '../../Redux/app'\nimport useDebounce from '../../Utils/react-debounce'\nimport { TASK_STATUS_COMPLETED } from '../../Config/task-status'\n\n\nconst Index = props => {\n  const { tasks, label, handleModalTaskOpen } = props\n  const [tasksMapped, setTasksMapped] = useState(<></>)\n\n  const debouncedListRender = useDebounce(tasksMapped, 10) // Need to debounce because of late props assignment\n\n  useEffect(() => {\n    const handleModalOpen = (task) => {\n      handleModalTaskOpen(true, task)\n    }\n\n    if (debouncedListRender) {\n      setTasksMapped(tasks.map(task => {\n        const overdue = new Date().getTime() > new Date(task.dueDate).getTime()\n        const isCompleted = task.status === TASK_STATUS_COMPLETED\n        return (\n          <Card\n            width={1}\n            mb={10}\n            variant='listItemContainer'\n            onClick={() => handleModalOpen(task)}\n            key={task._id}\n          >\n            <Flex\n              justifyContent='space-between'\n              alignItems='top'\n            >\n              <Box>\n                <Text\n                  variant='subtitle'\n                  mb={10}\n                  fontSize={14}\n                >\n                  {task.title}\n                </Text>\n                <Text fontSize={12}>{isCompleted ? 'Completed on :' : 'Due on :'} {dateFormatter(isCompleted ? task.completedAt: task.dueDate)}</Text>\n              </Box>\n              \n              <Box>\n                <Text fontSize={12} textAlign='right' mb={10}>{task.assignee && task.assignee.username}</Text>\n                <Text fontSize={12} textAlign='right' color={colors.red}>{overdue && !isCompleted &&  'OVERDUE'}</Text>\n              </Box>\n            </Flex>\n            <hr />\n            <Text fontSize={14} mb={30}>{`${task.description.slice(0, 100)}`}</Text>\n            <Text>\n              {task.tags && task.tags.map(tag => {\n                return (\n                  <Box key={tag} variant='tag'>{tag}</Box>\n                )\n              })}\n            </Text>\n          </Card>\n        )\n      }))\n    }\n  }, [debouncedListRender])\n\n  return (\n    <Box\n      width={1}\n      mr={4}\n      variant='listContainer'\n    >\n      <Heading\n        pb={40}\n        pl={10}\n        fontSize={3}\n      >\n        {label}\n      </Heading>\n      {tasksMapped}\n    </Box>\n  )\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  handleModalTaskOpen: (open, task) => AppActions.ModalTaskDetailOpen(open, task)\n}, dispatch)\n\nexport default connect(\n  null, \n  mapDispatchToProps\n)(Index)","import { useState, useEffect } from 'react'\n\n// Our hook\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value])\n\n  return debouncedValue\n}","import React, { useState, useEffect } from 'react'\nimport { Flex } from 'rebass'\nimport { TASK_STATUS_BACKLOG, TASK_STATUS_IN_PROGRESS, TASK_STATUS_COMPLETED, LABEL_TASK_STATUS } from '../../Config/task-status'\nimport TaskListSingle from '../TaskListSingle'\n\n// Worst kind of categorizing! I might create backend for this if the time is enough\nconst Index = props => {\n  const [taskListMapped, setTaskListMapped] = useState([<></>])\n\n  useEffect(() => {\n    const taskList = {\n      [TASK_STATUS_BACKLOG]: [],\n      [TASK_STATUS_IN_PROGRESS]: [],\n      [TASK_STATUS_COMPLETED]: []\n    }\n\n    const filterTaskList = () => {\n      props.taskList.forEach(task => {\n        switch (task.status) {\n          case TASK_STATUS_BACKLOG:\n            if (taskList[TASK_STATUS_BACKLOG].filter(val => val._id === task._id).length < 1 ) {\n              return taskList[TASK_STATUS_BACKLOG].push(task)\n            }\n            break\n          case TASK_STATUS_IN_PROGRESS:\n            if (taskList[TASK_STATUS_IN_PROGRESS].filter(val => val._id === task._id).length < 1 ) {\n              return taskList[TASK_STATUS_IN_PROGRESS].push(task)\n            }\n            break\n          case TASK_STATUS_COMPLETED:\n            if (taskList[TASK_STATUS_COMPLETED].filter(val => val._id === task._id).length < 1 ) {\n              return taskList[TASK_STATUS_COMPLETED].push(task)\n            }\n            break\n          default:\n            return false\n        }\n      })\n    }\n\n    filterTaskList()\n    const map = Object.keys(taskList).map((category, index) => {\n      return (\n        <TaskListSingle\n          key={index}\n          tasks={taskList[category].sort((a, b) => new Date(b.dirtyAt) - new Date(a.dirtyAt))} // sort by latest update\n          label={LABEL_TASK_STATUS[category]}\n        />\n      )\n    })\n\n    setTaskListMapped(map)\n  }, [props.taskList])\n\n  return (\n    <Flex\n      mt={10}\n      width={1}\n      justifyContent='space-between'\n      alignItems='top'\n    >\n      {taskListMapped}\n    </Flex>\n  )\n}\n\nexport default Index","import React from 'react'\nimport { Box, Button, Flex } from 'rebass'\nimport { push } from 'connected-react-router'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { Detector } from 'react-detect-offline'\nimport Model, { InitialValues } from '../../Models/Tasks'\nimport { selector as UserSelector } from '../../Redux/user'\nimport { actions as AppActions, selector as AppSelector } from '../../Redux/app'\nimport textContent from './text'\nimport { TASK_STATUS_COMPLETED } from '../../Config/task-status'\nimport { DB_TASKS } from '../../Config/db-names'\n\n// Components\nimport Frame from '../../Components/Frame'\nimport TaskCard from '../../Components/TaskCard'\nimport TaskModalAdd from '../../Components/TaskModalAdd'\nimport TaskList from '../../Components/TaskList'\nimport colors from '../../Theme/colors'\n\n// Combining tags fetched from all tasks for the tag input suggestion\nconst combineTags = (data, index = data.length - 1, tags = []) => {\n  if (index < 0) {\n    return tags\n  } else {\n    if (data[index].tags) {\n      for (let i = 0; i < data[index].tags.length; i++) {\n        const duplicate = tags.filter(tag => (tag === data[index].tags[i]))\n        if (duplicate.length < 1) {\n          tags.push(data[index].tags[i])\n        }\n      }\n    }\n    return combineTags(data, index - 1, tags)\n  }\n}\n\nconst lastSync = localStorage.getItem('lastSync')\n\nclass Index extends React.PureComponent {\n  state = {\n    unsub: null, // using state because using direct object isn't working\n    taskList: [],\n    lastSyncDate: lastSync ? new Date(JSON.parse(lastSync)) : 'Never',\n    loading: false,\n    taskAddOpened: false,\n    taskDetailOpened: false,\n    tagList: []\n  }\n\n  async componentDidMount() {\n    this.setState({\n      unsub: await Model.subscribe(this.handleUpdate),\n      loading: true\n    })\n  }\n\n  async componentDidUpdate() {\n    if (!Model.isInitialized) {\n      Model.setName(DB_TASKS)\n      await Model.initialize() // to initialize database locally by getting synced\n    }\n\n    if (Model.data.length > 0) {\n      const tagList = combineTags(Model.data)\n\n      if (JSON.stringify(this.state.tagList) !== JSON.stringify(tagList)) { // Need to stringify to check if both arrays are equal\n        this.setState({ tagList })\n      }\n    }\n    this.setState({ loading: false })\n  }\n\n  async componentWillUnmount() {\n    const { unsub } = this.state\n\n    unsub && unsub()\n    await Model.deinitialize() // to destroy database locally if it's needed\n  }\n\n  handleUpdate = () => {\n    const { handleTaskListSave } = this.props\n\n    handleTaskListSave(Model.data)\n  }\n\n  handleRemove = async id => {\n    try {\n      await Model.deleteItem(id)\n\n      alert(textContent.HOME_TEXT_ALERT_TASK_DELETED)\n      this.handleModalClose()\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  handleSubmit = async (values, taskDetail) => {\n    const { user } = this.props\n    const { title, assignee, description, status, dueDate, tags } = values\n    const body = {\n      title,\n      assignee: JSON.parse(assignee), // option only limited to string and numbers, so i did stringify + parse\n      reporter: user,\n      description,\n      status,\n      dueDate,\n      tags\n    }\n\n    try {\n      if (taskDetail) {\n        await Model.editItem(taskDetail._id, body)\n      } else {\n        await Model.addItem(body)\n      }\n\n      alert(taskDetail ? textContent.HOME_TEXT_ALERT_TASK_UPDATED : textContent.HOME_TEXT_ALERT_TASK_CREATED)\n      this.handleModalClose()\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  handleMoveCard = async (status, task) => {\n    const body = {\n      status\n    }\n\n    if (status === TASK_STATUS_COMPLETED) {\n      body.completedAt = new Date()\n    }\n\n    try {\n      await Model.editItem(task._id, body)\n\n      alert(textContent.HOME_TEXT_ALERT_TASK_UPDATED)\n      this.handleModalClose()\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  handleUpload = async () => {\n    const today = new Date()\n    await Model.upload()\n\n    alert(textContent.HOME_TEXT_ALERT_SYNC_COMPLETE)\n    localStorage.setItem('lastSync', JSON.stringify(today))\n    this.setState({\n      lastSyncDate: today\n    })\n  }\n\n  handleModalClose = () => {\n    const { handleModalCloseAll } = this.props\n    handleModalCloseAll()\n  }\n\n  render() {\n    const { user, userList, handleModalTaskOpen, modalTaskOpened, modalTaskDetailOpened, taskDetail, taskList } = this.props\n    const { lastSyncDate, loading, tagList } = this.state\n\n    return (\n      <Frame loading={loading}>\n        <TaskCard\n          opened={modalTaskDetailOpened}\n          onClose={this.handleModalClose}\n          onEdit={handleModalTaskOpen}\n          onMoveCard={this.handleMoveCard}\n          onRemove={this.handleRemove}\n          task={taskDetail}\n        />\n        <TaskModalAdd\n          opened={modalTaskOpened}\n          initialValues={InitialValues}\n          onClose={this.handleModalClose}\n          onSubmit={this.handleSubmit}\n          userList={userList}\n          tagList={tagList}\n        />\n        <Box\n          width={1}\n        >\n          <h3>Welcome, {user.username}!</h3>\n          <p>Last Sync Date: {lastSyncDate ? lastSyncDate.toString() : 'Never'}</p>\n        </Box>\n          <Detector\n            render={({ online }) => {\n              return (\n                <Flex\n                  width={1}\n                  variant='inline'\n                >\n                  <Box\n                    width={1}\n                  >\n                    <Button\n                      variant='primary'\n                      mr={2}\n                      onClick={() => handleModalTaskOpen(true)}\n                    >\n                      {textContent.HOME_TEXT_BUTTON_ADD_ITEM}\n                    </Button>\n                    <Button\n                      variant='primary'\n                      onClick={this.handleUpload}\n                      disabled={!online}\n                      sx={{\n                        ':disabled': {\n                          backgroundColor: colors.lines,\n                        }\n                      }}\n                    >\n                      {textContent.HOME_TEXT_BUTTON_UPLOAD_LIST}\n                    </Button>\n                  </Box>\n                </Flex>\n              )\n            }}\n          />\n        <TaskList taskList={taskList} />\n      </Frame>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: UserSelector.selectData(state),\n  userList: UserSelector.selectUsers(state),\n  modalTaskOpened: AppSelector.selectModalTaskOpened(state),\n  modalTaskDetailOpened: AppSelector.selectModalTaskDetailOpened(state),\n  taskDetail: AppSelector.selectTaskDetail(state),\n  taskList: AppSelector.selectTaskList(state)\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  changePage: (route) => push(route),\n  handleTaskListSave: taskList => AppActions.TaskListSave(taskList),\n  handleModalTaskOpen: (open, task) => AppActions.ModalTaskOpen(open, task),\n  handleModalCloseAll: () => AppActions.ModalTaskCloseAll()\n}, dispatch)\n\nexport default connect(\n  mapStateToProps, \n  mapDispatchToProps\n)(Index)","export const DB_TASKS = 'lil_tasks'"],"sourceRoot":""}